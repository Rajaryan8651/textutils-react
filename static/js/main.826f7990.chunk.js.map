{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","a","title","type","id","aboutText","class","onClick","greenmode","value","htmlFor","redmode","toggleMode","role","Textform","useState","text","setText","style","color","heading","onChange","event","target","backgroundColor","rows","newtext","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","newText","split","join","length","prototypes","PropTypes","string","isRequired","abouttext","defaultProps","Alert","alert","word","lower","charAt","slice","captalised","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.826f7990.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n// import {Link} from 'react-router-dom'\n\n\n\nexport default function Navbar(props) {\n    return (\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n        <div className=\"container-fluid\">\n              <href className=\"navbar-brand\" a=\"#\">{props.title}</href>\n              <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n              </button>\n              <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                  <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li className=\"nav-item\">\n                            <href className=\"nav-link active\" aria-current=\"page\" a=\"#\">Home</href>\n                        </li>\n                        <li className=\"nav-item\">\n                            <href className=\"nav-link\" a=\"#\">{props.aboutText}</href>\n                        </li>\n                  \n                  </ul>\n              {/* <form className=\"d-flex\">\n                <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\n                <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\n              </form> */}\n                   <div class={`form-check form-switch text-${props.mode===`light`?`dark`:`light`}`}>\n                        <input className=\"form-check-input\" onClick={props.greenmode} type=\"checkbox\" id=\"inlineCheckbox1\" value=\"option1\"/>\n                        <label className=\"form-check-label\" htmlFor=\"inlineCheckbox1\">Green</label>\n                      </div>\n                      <div className={`form-check form-switch text-${props.mode===`light`?`dark`:`light`}`}>\n                        <input className=\"form-check-input\" onClick={props.redmode} type=\"checkbox\" id=\"inlineCheckbox2\" value=\"option2\"/>\n                        <label className=\"form-check-label\" htmlFor=\"inlineCheckbox2\">Red</label>\n                      </div>\n                   <div className={`form-check form-switch text-${props.mode===`light`?`dark`:`light`}`}>\n                      <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\n                      <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable dark mode</label>\n                    </div>\n              </div>\n        </div>\n      </nav>\n)\n}\nNavbar.prototypes ={\n  title: PropTypes.string.isRequired,\n  abouttext:PropTypes.string.isRequired\n}\nNavbar.defaultProps ={\n  title:\"set Title here\",\n  abouttext:\"about\"\n}\n","import React, {useState} from 'react'\n\nexport default function Textform(props) {\n    const handleupClick =()=>{\n        //   console.log(\"uppercase was Clicked\");\n          let newtext=text.toUpperCase();\n          setText(newtext);\n          props.showAlert(\"converted to upper case!\",\"success\");\n        }\n        const handledownClick =()=>{\n            //   console.log(\"uppercase was Clicked\");\n            let newtext=text.toLowerCase();\n            setText(newtext)\n            props.showAlert(\"converted to Lower case!\",\"success\");\n        }\n        const handleclearClick =()=>{\n            //   console.log(\"uppercase was Clicked\");\n            let newtext='';\n            setText(newtext)\n            props.showAlert(\"text cleared!\",\"success\");\n        }\n        const handleOnchange =(event)=>{\n            //   console.log(\"uppercase was Clicked\");\n            setText(event.target.value)\n        }\n        const handleCopy = () =>{\n            var text =document.getElementById(\"myBox\");\n            text.select();\n            navigator.clipboard.writeText(text.value);\n            props.showAlert(\"copied to clipboard!\",\"success\");\n        }\n        const handleExtraSpaces= () =>{\n            let  newText =text.split(/[ ]+/);\n            setText(newText.join(\" \"))\n            props.showAlert(\"Extra space cleared!\",\"success\");\n        \n    }\n     const [text,setText] = useState('');\n    return (\n        <>\n        <div className =\"container\" style={{color:props.mode===`dark`?`white`:`black`}}>\n                    <div className=\"mb-3\" >\n                        <h1 >{props.heading}</h1>\n                        <textarea className=\"form-control\" value={text} onChange ={handleOnchange} style={{backgroundColor:props.mode===`dark`?`grey`:`white`,color:props.mode===`dark`?`white`:`black`}} id=\"myBox\" rows=\"8\"></textarea>\n                    </div>\n                \n                    <button  className=\"btn btn-outline-success mx-2\"  onClick={handleupClick} >Convert to uppercase</button>\n                    <button  className=\"btn btn-outline-success mx-2\"  onClick={handledownClick} >Convert to lowercase</button>\n                    <button  className=\"btn btn-outline-success mx-2\"  onClick={handleclearClick} >Clear text</button>\n                    <button  className=\"btn btn-outline-success mx-2\"  onClick={handleCopy} >Copy text</button>\n                    <button  className=\"btn btn-outline-success mx-2\"  onClick={handleExtraSpaces} >Clear spaces</button>\n        </div> \n                <div className=\"container my-3 \"style={{color:props.mode===`dark`?`white`:`black`}}>\n                    <h2>Your text summary</h2>\n                    <p>{text.split(\" \").length} words and {text.length} character</p>\n                    <p>{0.008 * text.split(\" \").length} minute read</p>\n                    <p>Preview</p>\n                    <p>{text.length>0?text:\"enter your text to preview here\"}</p>\n                </div>\n        </>\n    )\n}\n","import React from 'react'\n\nfunction Alert(props) {\n    const captalised =(word)=>{\n        const lower= word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n       props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n              <strong>{captalised(props.alert.type)}</strong> :{props.alert.msg}\n            \n      </div>\n    )\n}\n\nexport default Alert\n","\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\nfunction App() {\n    const [mode, setMode] = useState('light');\n    const [alert, setAlert] = useState(null);\n\n    const showAlert=(message,type)=>{\n      setAlert({\n        msg: message,\n        type:type\n      })\n      setTimeout(() => {\n        setAlert(null);\n      }, 1000);\n    }\n\n\n    const toggleMode = () =>{\n      if(mode === `light`){\n        setMode('dark');\n        document.body.style.backgroundColor =`#13536b`;\n        showAlert(\"Dark mode has been enabled\",\"success\");\n        document.title =\"textutils - Dark Mode\"\n      //   setInterval(() => {\n          \n      //     document.title =\"textutils -is amazing\"\n      //   }, 2000);\n      //   setInterval(() => {\n          \n      //     document.title =\"install texutilst\"\n      //   }, 2500);\n      }\n      \n      else{\n        setMode('light');\n        document.body.style.backgroundColor =`white`;    \n        showAlert(\"light mode has been enabled\",\"success\");\n        document.title =\"textutils - light Mode\"\n        }\n      }\n    const redmode= () =>{\n      if(mode === `light`){\n        setMode('dark');\n        document.body.style.backgroundColor =`#dc3545`;\n        showAlert(\"Red mode has been enabled\",\"success\");\n      }\n      else{\n       \n              setMode('light');\n              document.body.style.backgroundColor =`white`;    \n              showAlert(\"light mode has been enabled\",\"success\");\n              \n        \n        }\n      \n      }\n    const greenmode= () =>{\n      if(mode === `light`){\n        setMode('dark');\n        document.body.style.backgroundColor =`rgb(47 185 38)`;\n        showAlert(\"green mode has been enabled\",\"success\");\n      }\n        else{\n          setMode('light');\n          document.body.style.backgroundColor =`white`;    \n          showAlert(\"light mode has been enabled\",\"success\");\n          }\n          \n      }\n\n  return (\n    <>\n    {/* <Router> */}\n   \n              {/* <Navbar title=\"Textutils\" abouttext=\"About Textutils\"/> */}\n              {/* <Navbar /> */}\n              <Navbar title=\"Textutils\" aboutText=\"About\"  mode={mode} toggleMode={toggleMode} redmode={redmode} greenmode={greenmode}/>\n              <Alert  alert={alert}/>\n                \n              \n         <div className=\"container my-3\">\n         {/* <Switch>\n              <Route exact path=\"/about\">\n                <About />\n              </Route>\n             \n              <Route exact path=\"/\">\n              </Route>\n            </Switch> */}\n            <Textform showAlert={showAlert} heading=\"Enter the text to analyse below\" mode={mode}/>\n         </div>\n\n        {/* </Router> */}\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}